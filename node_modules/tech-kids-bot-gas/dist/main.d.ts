import type * as GoogleChatTypes from "googleapis";
import type { GoogleChatCardV2Card } from "./googleChatCardV2";
declare type GoogleChatMessage = GoogleChatTypes.chat_v1.Schema$Message & {
    /** @deprecated */ cardsV2?: undefined;
    cards_v2?: {
        card_id: string;
        card: GoogleChatCardV2Card;
    };
};
declare type GoogleChatSpace = GoogleChatTypes.chat_v1.Schema$Space;
declare type GoogleChatMembership = GoogleChatTypes.chat_v1.Schema$Membership;
declare type GoogleChatUser = GoogleChatTypes.chat_v1.Schema$User;
declare type GoogleChatMessageReplyOption = "MESSAGE_REPLY_OPTION_UNSPECIFIED" | "REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD" | "REPLY_MESSAGE_OR_FAIL";
declare type TinyUser = {
    email: string;
    userId: string | null;
};
/**
 * Google Chatを操作するクラス
 *
 * @throws サービスアカウントの情報を取得できなかった場合
 * @throws Google Users Database にアクセスできなかった場合
 * @throws Tech Kids Bot DM Database にアクセスできなかった場合
 */
declare class GoogleChat {
    private service;
    private userDB;
    private dmDB;
    constructor();
    /**
     * 指定したスペースやDMにメッセージを送信する
     *
     * @param spaceId 送信先のスペースID(URLの `dm` や `space` の後の文字列)
     * @param message 送信するメッセージのオブジェクト ([詳細](https://developers.google.com/chat/api/reference/rest/v1/spaces.messages#Message))
     * @param mentions (オプション) メンションを飛ばしたいアカウントのメールアドレスの配列
     * @param replyOption (オプション) 別のメッセージに対してのリプライオプション([詳細](https://developers.google.com/chat/api/reference/rest/v1/spaces.messages/create#MessageReplyOption))
     * @return 送信されたメッセージ
     */
    sendSpaceMessage(spaceId: string, message: GoogleChatMessage, mentions?: string[], replyOption?: GoogleChatMessageReplyOption): GoogleChatMessage;
    /**
     * 指定したスペースやDMにメッセージを送信する
     *
     * @deprecated `sendSpaceMessage` を使用してください
     *
     * @param spaceId 送信先のスペースID(URLの `dm` や `space` の後の文字列)
     * @param message 送信するメッセージのオブジェクト ([詳細](https://developers.google.com/chat/api/reference/rest/v1/spaces.messages#Message))
     * @param mentions (オプション) メンションを飛ばしたいアカウントのメールアドレスの配列
     * @param replyOption (オプション) 別のメッセージに対してのリプライオプション([詳細](https://developers.google.com/chat/api/reference/rest/v1/spaces.messages/create#MessageReplyOption))
     * @return 送信されたメッセージ
     */
    sendMessage(spaceId: string, message: GoogleChatMessage, mentions?: string[], replyOption?: GoogleChatMessageReplyOption): GoogleChatMessage;
    /**
     * メールアドレスを指定して相手にDMを送る
     *
     * @param email メンションを送る相手のメールアドレス
     * @param message メッセージ
     * @param mention DM時にメンションを付けるかどうか
     * @param mentions (オプション) メンションを飛ばしたいアカウントのメールアドレスの配列
     * @param replyOption (オプション) 別のメッセージに対してのリプライオプション([詳細](https://developers.google.com/chat/api/reference/rest/v1/spaces.messages/create#MessageReplyOption))
     * @throws DMの相手が見つからなかった場合(相手とBotがDMでつながっていない場合など)
     */
    sendDirectMessage(email: string, message: GoogleChatMessage, mention: boolean, replyOption?: GoogleChatMessageReplyOption): void;
    /** Botが所属している全てのスペースとDMの一覧を返す */
    listSpaces(): GoogleChatSpace[];
    /** 指定したスペースやDMに所属するメンバーの一覧を返す */
    listSpaceMember(spaceId: string): GoogleChatMembership[];
    /** メールアドレスの配列からユーザーIDの配列を返す */
    findUserIdsByEmails(emails: string[]): TinyUser[];
    /**
     * メールアドレスからユーザーIDを返す
     *
     * ⚠ 複数のメールアドレスをユーザーIDに変換したい場合 {@link GoogleChat.findUserIdsByEmails} を使用
     *  */
    findUserIdByEmail(email: string): TinyUser;
}
export * from "./googleChatCardV2";
export { GoogleChat, GoogleChatMembership, GoogleChatMessage, GoogleChatSpace, GoogleChatUser, TinyUser, };
